{{> header}}
<style>
    .lab-main {
        max-width: 1000px;
        margin: 100px auto 100px auto;
        padding: 2rem;
    }

    .lab-container .card {
        background: var(--background-light);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .lab-container h2 {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        border-bottom: 2px solid rgba(0, 255, 157, 0.2);
        padding-bottom: 0.75rem;
    }

    .lab-controls {
        justify-content: center;
        margin-bottom: 2rem;
    }

    .lab-controls button {
        padding: 12px 28px;
        font-size: 1.1rem;
        font-weight: 600;
    }

    .terminal {
        background-color: #111;
        border: 2px solid var(--primary-color);
        box-shadow: 0 0 15px rgba(0, 255, 157, 0.15);
    }

    .terminal-header {
        background-color: var(--background-light);
        padding: 0.75rem 1rem;
        font-weight: bold;
    }

    .terminal-content {
        padding: 1rem;
        height: 400px;
        font-size: 1rem;
    }

    .terminal-prompt {
        display: flex;
    }

    .terminal-input {
        flex-grow: 1;
        background: transparent;
        border: none;
        color: #00ff00;
        outline: none;
    }

    @media (max-width: 768px) {
        .lab-main {
            padding: 1rem;
            margin-top: 80px;
        }
        .lab-container .card {
            padding: 1.5rem;
        }
    }
</style>
<!-- Main Content -->
<main class="min-h-screen mt-0">
    <div class="lab-main">
        <div class="lab-container">
            <div class="card lab-environment">
                <h2>Virtual Lab Environment</h2>
                <div class="lab-controls">
                    <button class="btn-primary">Start Simulation</button>
                    <button class="btn-secondary">Reset Environment</button>
                </div>
                <div class="lab-workspace">
                    <div class="terminal">
                        <div class="terminal-header">
                            <span>Terminal</span>
                        </div>
                        <div class="terminal-content">
                            <!-- Terminal content will be generated by script.js -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        class TerminalSimulation {
            constructor(element) {
                this.element = element;
                this.commandHistory = [];
                this.historyIndex = -1;
                this.setupTerminal();
            }

            setupTerminal() {
                this.element.innerHTML = '';
                this.addLine('Welcome to CyberGuard Terminal');
                this.addLine('Type "help" for available commands');
                this.addPrompt();

                this.element.addEventListener('click', () => {
                    const input = this.element.querySelector('.terminal-input');
                    if (input) {
                        input.focus();
                    }
                });

                this.element.addEventListener('keydown', (e) => {
                    const input = this.element.querySelector('.terminal-input');
                    if (!input) return;

                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const command = input.textContent.trim();
                        input.parentElement.innerHTML = `<span>root@cyberlab:~# </span><span>${command}</span>`;
                        this.handleCommand(command);
                    } else if (e.key === 'ArrowUp') {
                        e.preventDefault();
                        if (this.historyIndex > 0) {
                            this.historyIndex--;
                        } else if (this.commandHistory.length > 0) {
                            this.historyIndex = 0;
                        }
                        if (this.historyIndex !== -1) input.textContent = this.commandHistory[this.historyIndex] || '';
                    } else if (e.key === 'ArrowDown') {
                        e.preventDefault();
                        if (this.historyIndex < this.commandHistory.length - 1) {
                            this.historyIndex++;
                            input.textContent = this.commandHistory[this.historyIndex];
                        } else {
                            this.historyIndex = this.commandHistory.length;
                            input.textContent = '';
                        }
                    }
                });
            }

            addLine(text) {
                const line = document.createElement('div');
                line.innerHTML = text; // Use innerHTML to allow for styled text
                this.element.appendChild(line);
            }

            addPrompt() {
                const prompt = document.createElement('div');
                prompt.className = 'terminal-prompt';
                prompt.innerHTML = '<span>root@cyberlab:~# </span><span contenteditable="true" class="terminal-input"></span>';
                this.element.appendChild(prompt);

                const input = prompt.querySelector('.terminal-input');
                input.focus();
                this.element.scrollTop = this.element.scrollHeight;
            }

            handleCommand(command) {
                if (command) {
                    this.commandHistory.push(command);
                }
                this.historyIndex = this.commandHistory.length;

                switch (command.toLowerCase()) {
                    case 'help':
                        this.addLine('Available commands:');
                        this.addLine('- <span style="color: #00ff9d;">help</span>: Show this help message');
                        this.addLine('- <span style="color: #00ff9d;">clear</span>: Clear the terminal');
                        this.addLine('- <span style="color: #00ff9d;">scan</span>: Perform a security scan');
                        this.addPrompt();
                        break;

                    case 'clear':
                        this.setupTerminal();
                        return;

                    case 'scan':
                        this.performScan();
                        break;

                    default:
                        if (command) {
                            this.addLine(`<span style="color: #ff4444;">Command not found:</span> ${command}`);
                        }
                        this.addPrompt();
                }
            }

            async performScan() {
                const steps = [
                    'Initializing security scan...',
                    'Checking system vulnerabilities...',
                    'Analyzing network traffic...',
                    'Scanning for malware...',
                    'Generating report...'
                ];

                for (const step of steps) {
                    this.addLine(step);
                    this.element.scrollTop = this.element.scrollHeight;
                    await new Promise(resolve => setTimeout(resolve, 500));
                }

                this.addLine('<span style="color: #00c851;">Scan complete! No vulnerabilities found.</span>');
                this.addPrompt();
            }
        }

        const terminalContent = document.querySelector('.terminal-content');
        if (terminalContent) {
            new TerminalSimulation(terminalContent);
        }
    });
</script>

{{> footer}}