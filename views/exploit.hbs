{{> header}}
<style>
    /* styles.css */
    body {
        margin: 0;
        font-family: 'Courier New', Courier, monospace;
        color: #00ff9d;
        background: #181818;
    }

    .exploit-main {
        max-width: 800px;
        margin: auto;
        margin-bottom: 80px;
        background: #2a2a2a;
        border-radius: 16px;
        box-shadow: 0 6px 24px rgba(0,0,0,0.25);
        padding: 2.5rem 2rem 2rem 2rem;
    }

    #game-container {
        text-align: center;
        margin: 0;
    }

    #level-selection {
        margin-top: 10px;
        margin-bottom: 30px;
        padding: 1rem 0;
        background: #222;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,255,157,0.05);
    }

    .level-btn {
        background-color: #00ff9d;
        color: #181818;
        border: none;
        padding: 12px 28px;
        margin: 10px 8px;
        font-size: 1.1rem;
        border-radius: 8px;
        cursor: pointer;
        transition: background 0.2s, transform 0.2s;
        box-shadow: 0 2px 8px rgba(0,255,157,0.08);
    }

    .level-btn:hover {
        background-color: #00e58c;
        transform: translateY(-2px) scale(1.04);
    }

    #game-area {
        display: none;
        margin-top: 30px;
    }

    #mission-brief {
        background: #222;
        padding: 18px 16px;
        border-radius: 10px;
        margin-bottom: 18px;
        box-shadow: 0 2px 8px rgba(0,255,157,0.05);
        color: #fff;
    }

    #mission-brief h2 {
        color: #00ff9d;
        font-size: 1.3rem;
        margin-bottom: 8px;
    }

    #terminal-output {
        background: #111;
        padding: 18px 16px;
        border-radius: 10px;
        margin-bottom: 18px;
        height: 180px;
        overflow-y: auto;
        text-align: left;
        color: #00ff9d;
        font-size: 1rem;
        box-shadow: 0 2px 8px rgba(0,255,157,0.05);
    }

    #terminal-output p {
        margin: 0 0 6px 0;
        font-family: inherit;
    }

    #tools-container {
        background: #222;
        padding: 18px 16px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,255,157,0.05);
        color: #fff;
    }

    #tools-container p {
        margin-bottom: 10px;
        font-size: 1rem;
    }

    #tools-container input[type="text"],
    #tools-container input[type="number"] {
        width: 70%;
        padding: 8px 12px;
        border-radius: 6px;
        border: 1px solid #00ff9d;
        background: #181818;
        color: #00ff9d;
        font-size: 1rem;
        margin-bottom: 10px;
        outline: none;
        transition: border 0.2s;
    }

    #tools-container input[type="text"]:focus,
    #tools-container input[type="number"]:focus {
        border: 1.5px solid #00e58c;
    }

    #tools-container button {
        background: #00ff9d;
        color: #181818;
        border: none;
        padding: 8px 20px;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        margin-left: 8px;
        margin-bottom: 6px;
        transition: background 0.2s, transform 0.2s;
        box-shadow: 0 2px 8px rgba(0,255,157,0.08);
    }

    #tools-container button:hover {
        background: #00e58c;
        transform: translateY(-2px) scale(1.04);
    }

    footer {
        margin-top: 30px;
        color: #666;
        font-size: 0.95rem;
        text-align: center;
        background: none;
        border: none;
    }
</style>
<main class="min-h-screen">
    <div class="exploit-main">
        <div id="game-container">
            <header>
                <h1 class="text-3xl font-bold text-green-400 text-center mb-8 drop-shadow border-green-400 pb-2">Exploit Master</h1>
            </header>
            <section id="level-selection">
                <h2 class="text-2xl text-green-400 mb-4">Select a Level</h2>
                <button class="level-btn" id="beginner-btn">Beginner</button>
                <button class="level-btn" id="intermediate-btn">Intermediate</button>
                <button class="level-btn" id="advanced-btn">Advanced</button>
            </section>

            <section id="game-area">
                <div id="mission-brief">
                    <!-- Mission details based on selected level -->
                </div>
                <div id="terminal-output">
                    <!-- Output or responses based on player's actions -->
                </div>
                <div id="tools-container">
                    <!-- Interaction tools, like inputs and buttons, go here -->
                </div>
            </section>

            <footer>
                <p>Exploit Master - Learn Ethical Hacking</p>
            </footer>
        </div>
    </div>
    <script>
        // game.js
        document.addEventListener('DOMContentLoaded', () => {
            const beginnerBtn = document.getElementById('beginner-btn');
            const intermediateBtn = document.getElementById('intermediate-btn');
            const advancedBtn = document.getElementById('advanced-btn');
            const missionBrief = document.getElementById('mission-brief');
            const gameArea = document.getElementById('game-area');
            const toolsContainer = document.getElementById('tools-container');
            const terminalOutput = document.getElementById('terminal-output');

            let gameStartTime = null;
            let currentGameType = '';
            let gameScore = 0;

            beginnerBtn.addEventListener('click', () => loadLevel('beginner'));
            intermediateBtn.addEventListener('click', () => loadLevel('intermediate'));
            advancedBtn.addEventListener('click', () => loadLevel('advanced'));

            function loadLevel(level) {
                gameStartTime = new Date();
                currentGameType = level;
                gameScore = 0;
                gameArea.style.display = 'block';
                toolsContainer.innerHTML = '';
                terminalOutput.innerHTML = '';

                switch (level) {
                    case 'beginner':
                        loadBeginnerLevel();
                        break;
                    case 'intermediate':
                        loadIntermediateLevel();
                        break;
                    case 'advanced':
                        loadAdvancedLevel();
                        break;
                }
            }

            function loadBeginnerLevel() {
                missionBrief.innerHTML = `
      <h2>Beginner Level: SQL Injection</h2>
      <p>Your task: Perform SQL injection on a vulnerable login form.</p>
    `;
                renderSQLInjectionTool();
            }

            function loadIntermediateLevel() {
                missionBrief.innerHTML = `
      <h2>Intermediate Level: Buffer Overflow</h2>
      <p>Your task: Exploit a buffer overflow vulnerability to gain unauthorized access.</p>
    `;
                renderBufferOverflowTool();
            }

            function loadAdvancedLevel() {
                missionBrief.innerHTML = `
      <h2>Advanced Level: Privilege Escalation</h2>
      <p>Your task: Escalate privileges on a compromised system using kernel exploits.</p>
    `;
                renderPrivilegeEscalationTool();
            }

            // Add save functionality when user completes tasks
            async function saveGameSession() {
                if (!gameStartTime) return;
                
                const timeSpent = Math.floor((new Date() - gameStartTime) / 1000);
                
                const gameData = {
                    gameType: currentGameType,
                    tasksCompleted: gameScore > 0 ? 1 : 0
                };

                try {
                    const response = await fetch('/training/save-session', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            gameType: 'exploit',
                            score: gameScore,
                            level: 1,
                            timeSpent: timeSpent,
                            completedChallenges: [currentGameType],
                            gameData: gameData
                        })
                    });

                    if (response.status === 401) {
                        alert('Please sign in to save your progress');
                        window.location.href = '/auth/login';
                        return;
                    }

                    const result = await response.json();
                    if (result.success) {
                        console.log('Game session saved successfully');
                    }
                } catch (error) {
                    console.error('Error saving game session:', error);
                }
            }

            function renderSQLInjectionTool() {
                toolsContainer.innerHTML = `
      <p>Enter SQL Payload:</p>
      <input type="text" id="sql-input" placeholder="e.g., ' OR '1'='1">
      <button id="run-sql">Execute</button>
    `;
                document.getElementById('run-sql').addEventListener('click', () => {
                    const input = document.getElementById('sql-input').value;
                    if (input.includes("' OR '1'='1")) {
                        terminalOutput.innerHTML += '<p>Login bypass successful!</p>';
                        gameScore = 100;
                        saveGameSession();
                    } else {
                        terminalOutput.innerHTML += '<p>SQL Injection failed. Try again.</p>';
                    }
                });
            }

            function renderBufferOverflowTool() {
                toolsContainer.innerHTML = `
      <p>Input Overflow Buffer Size:</p>
      <input type="number" id="buffer-input" placeholder="e.g., 512">
      <button id="run-buffer">Execute Overflow</button>
    `;
                document.getElementById('run-buffer').addEventListener('click', () => {
                    const bufferSize = parseInt(document.getElementById('buffer-input').value);
                    if (bufferSize > 128) {
                        terminalOutput.innerHTML += '<p>Buffer overflow successful! Memory compromised.</p>';
                        gameScore = 100;
                        saveGameSession();
                    } else {
                        terminalOutput.innerHTML += '<p>Overflow too small. Try again.</p>';
                    }
                });
            }

            function renderPrivilegeEscalationTool() {
                toolsContainer.innerHTML = `
      <p>Select Exploit Method:</p>
      <button id="kernel-exploit">Kernel Exploit</button>
      <button id="password-exploit">Weak Password Exploit</button>
    `;
                document.getElementById('kernel-exploit').addEventListener('click', () => {
                    terminalOutput.innerHTML += '<p>Kernel exploit successful! Privileges escalated to root.</p>';
                    gameScore = 100;
                    saveGameSession();
                });
                document.getElementById('password-exploit').addEventListener('click', () => {
                    terminalOutput.innerHTML += '<p>Weak password exploit successful! Admin rights obtained.</p>';
                    gameScore = 100;
                    saveGameSession();
                });
            }
        });
    </script>
</main>
{{> footer}}