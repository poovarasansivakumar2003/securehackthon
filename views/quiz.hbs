{{> header}}
<style>
    .quiz-main {
        max-width: 1000px;
        margin: 100px auto 100px auto;
        padding: 2rem;
    }

    .quests-grid {
        margin-bottom: 2rem;
    }

    .quiz-container {
        background: var(--background-light);
        border-radius: 12px;
        padding: 2rem;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .quiz-container h1 {
        font-size: 1.8rem;
        font-weight: bold;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        text-align: center;
    }

    .question {
        font-size: 1.25rem;
        margin-bottom: 1.5rem;
        color: var(--text-primary);
    }

    .options {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0.75rem;
    }

    .option {
        background: var(--background-dark);
        border: 2px solid var(--primary-color);
        color: var(--text-secondary);
        padding: 1rem;
        border-radius: 8px;
        text-align: left;
        cursor: pointer;
        transition: all 0.2s ease;
        width: 100%;
    }

    .option:hover {
        background: #00cc7a;
        color: var(--text-primary);
    }

    .option.correct {
        background: var(--success-color);
        border-color: var(--success-color);
        color: var(--background-dark);
        font-weight: bold;
    }

    .option.incorrect {
        background: var(--danger-color);
        border-color: var(--danger-color);
        color: var(--background-dark);
        font-weight: bold;
    }

    .result {
        margin-top: 1.5rem;
        font-size: 1.2rem;
        font-weight: bold;
        text-align: center;
        min-height: 2rem;
    }

    .score {
        text-align: center;
        font-size: 1.1rem;
        color: var(--text-secondary);
        margin-top: 1rem;
    }

    .quiz-controls {
        text-align: center;
        margin-top: 1.5rem;
    }

    .quiz-controls button {
        margin: 0 0.5rem;
    }

    .quests-grid .card button {
        background-color: var(--primary-color);
        color: var(--background-dark);
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

    .quests-grid .card button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 255, 157, 0.3);
    }
</style>
<!-- Main Content -->
<main class="min-h-screen mt-0">
    <div class="quiz-main">
        <div class="quests-grid">
            <div class="card daily-quest">
                <div class="quest-header">
                    <h3>Daily Challenge</h3>
                    <span class="time-remaining">23:45:12</span>
                </div>
                <p class="mb-4 text-[var(--primary-color)]">Complete 3 phishing identification exercises</p>
                <div class="quest-progress mb-6">
                    <div class="progress-bar">
                        <div class="progress" style="width: 33%">1/3</div>
                    </div>
                </div>
                <button class="bg-[#00ff9d] text-[#1a1a1a] font-semibold py-3 px-4 rounded-lg shadow hover:bg-[#00cc7a] transition-colors">Start Quest</button>
            </div>
            <!-- Add more quests -->
        </div>
        <div class="quiz-container">
            <h1>Cybersecurity Quiz</h1>
            <div class="question"></div>
            <div class="options"></div>
            <div class="result"></div>
            <div class="score">Score: 0</div>
            <div class="quiz-controls">
                <button class="btn-secondary next-btn" style="display: none;">Next Question</button>
                <button class="btn-primary submit-btn" style="display: none;">Submit Score</button>
                <button class="btn-secondary restart-btn" style="display: none;">Restart Quiz</button>
            </div>
        </div>
    </div>
</main>

<script>
    const userId = "specificUserId"; // Replace with actual user ID
    const questions = [
        {
            question: "What is a firewall?",
            options: [
                "A physical wall that protects servers",
                "A network security device that monitors traffic",
                "A type of computer virus",
                "A backup storage device"
            ],
            correct: 1
        },
        {
            question: "What is phishing?",
            options: [
                "A type of fish",
                "An attempt to obtain sensitive information",
                "A computer security measure",
                "A network protocol"
            ],
            correct: 1
        },
        {
            question: "What does SSL stand for?",
            options: [
                "Secure Sockets Layer",
                "System Security Layer",
                "Simple Sockets Layer",
                "Secure Server Layer"
            ],
            correct: 0
        },
        {
            question: "What is malware?",
            options: [
                "Software that damages or disrupts systems",
                "Hardware used for security",
                "A method of data encryption",
                "A type of internet browser"
            ],
            correct: 0
        },
        {
            question: "What is two-factor authentication?",
            options: [
                "A method of encrypting files",
                "A security process that requires two forms of verification",
                "A network security measure",
                "A method of data backup"
            ],
            correct: 1
        },
        {
            question: "What is a DDoS attack?",
            options: [
                "A method of data protection",
                "A type of cyber attack that overwhelms a system",
                "A software installation process",
                "A form of network security"
            ],
            correct: 1
        },
        {
            question: "What does VPN stand for?",
            options: [
                "Virtual Private Network",
                "Virtual Public Network",
                "Variable Protected Network",
                "Virtual Protected Network"
            ],
            correct: 0
        },
        {
            question: "What is social engineering?",
            options: [
                "A method of network design",
                "Manipulating people into divulging confidential information",
                "A type of software development",
                "An engineering discipline"
            ],
            correct: 1
        },
        {
            question: "What is a brute force attack?",
            options: [
                "An attack using physical force",
                "A method of gaining access by trying many passwords",
                "A type of email phishing",
                "A method of network design"
            ],
            correct: 1
        },
        {
            question: "What is vulnerability scanning?",
            options: [
                "Medical scanning",
                "Checking for security weaknesses",
                "A type of malware",
                "A backup system"
            ],
            correct: 1
        }
    ];

    let currentQuestion = 0;
    let score = 0;
    let questionAnswered = false;

    const questionEl = document.querySelector('.question');
    const optionsEl = document.querySelector('.options');
    const resultEl = document.querySelector('.result');
    const scoreEl = document.querySelector('.score');
    const nextBtn = document.querySelector('.next-btn');
    const submitBtn = document.querySelector('.submit-btn');
    const restartBtn = document.querySelector('.restart-btn');

    function initQuiz() {
        currentQuestion = 0;
        score = 0;
        nextBtn.style.display = 'none';
        submitBtn.style.display = 'none';
        restartBtn.style.display = 'none';
        resultEl.textContent = '';
        updateScore();
        loadQuestion();
    }

    function loadQuestion() {
        questionAnswered = false;
        const question = questions[currentQuestion];
        questionEl.textContent = `${currentQuestion + 1}. ${question.question}`;

        optionsEl.innerHTML = '';
        question.options.forEach((option, index) => {
            const button = document.createElement('button');
            button.className = 'option';
            button.textContent = option;
            button.addEventListener('click', () => checkAnswer(index, button));
            optionsEl.appendChild(button);
        });

        resultEl.textContent = '';
        nextBtn.style.display = 'none';
    }

    function checkAnswer(selectedIndex, selectedButton) {
        if (questionAnswered) return;
        questionAnswered = true;

        const correctIndex = questions[currentQuestion].correct;

        if (selectedIndex === correctIndex) {
            score++;
            resultEl.textContent = 'Correct! ðŸŽ‰';
            resultEl.style.color = 'var(--success-color)';
            selectedButton.classList.add('correct');
        } else {
            resultEl.textContent = 'Incorrect!';
            resultEl.style.color = 'var(--danger-color)';
            selectedButton.classList.add('incorrect');
            optionsEl.children[correctIndex].classList.add('correct');
        }

        // Disable all options
        Array.from(optionsEl.children).forEach(button => {
            button.style.pointerEvents = 'none';
        });

        updateScore();

        if (currentQuestion < questions.length - 1) {
            nextBtn.style.display = 'inline-block';
        } else {
            const percentage = ((score / questions.length) * 100).toFixed(2);
            resultEl.textContent = `Quiz Complete! Your final score is ${score}/${questions.length} (${percentage}%).`;
            submitBtn.style.display = 'inline-block';
        }
    }

    function updateScore() {
        scoreEl.textContent = `Score: ${score}`;
    }

    nextBtn.addEventListener('click', () => {
        currentQuestion++;
        loadQuestion();
    });

    submitBtn.addEventListener('click', () => {
        saveScore(userId, score);
        resultEl.textContent = 'Your score has been saved!';
        submitBtn.style.display = 'none';
        restartBtn.style.display = 'inline-block';
    });

    restartBtn.addEventListener('click', initQuiz);

    function saveScore(userId, score) {
        // Mock function for saving score to MongoDB
        console.log(`Saving score of ${score} for user ID: ${userId}`);
        // Example fetch to a backend endpoint:
        // fetch('/api/save-score', {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({ userId, score, total: questions.length })
        // });
    }

    document.addEventListener('DOMContentLoaded', initQuiz);
</script>
{{> footer}}