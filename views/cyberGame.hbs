{{> header}}

<style>
    .cyber-main {
        max-width: 1000px;
        margin: 100px auto 100px auto;
        background: #2a2a2a;
        border-radius: 18px;
        box-shadow: 0 6px 24px rgba(0, 0, 0, 0.25);
        padding: 2.5rem 2rem 2rem 2rem;
    }

    .dashboard {
        border: 2px solid #00ff9d;
        background: #222;
        border-radius: 14px;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.05);
        padding: 2rem 1.5rem;
        margin-bottom: 20px;
    }

    .network-map {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 10px;
        margin: 20px 0;
    }

    .node {
        background-color: #181818;
        border: 2px solid #00ff9d;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        border-radius: 8px;
        font-weight: 600;
        font-size: 1rem;
        transition: box-shadow 0.2s, border-color 0.2s, background 0.2s;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.05);
    }

    .node:hover {
        background-color: #23272a;
        box-shadow: 0 0 10px #00ff9d;
    }

    .node.infected {
        border-color: #ff4444;
        box-shadow: 0 0 10px #ff4444;
        animation: pulse 1s infinite;
    }

    .controls {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        justify-content: center;
    }

    button {
        background-color: #00ff9d;
        color: #181818;
        border: none;
        padding: 12px 28px;
        font-size: 1.1rem;
        font-weight: 600;
        border-radius: 8px;
        cursor: pointer;
        transition: background 0.2s, transform 0.2s;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.08);
    }

    button:hover {
        background-color: #00e58c;
        transform: translateY(-2px) scale(1.04);
    }

    .stats {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 10px;
        margin-bottom: 20px;
    }

    .stat-box {
        border: 1.5px solid #00ff9d;
        background: #181818;
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        color: #00ff9d;
        font-size: 1.1rem;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.05);
    }

    @keyframes pulse {
        0% {
            opacity: 1;
        }

        50% {
            opacity: 0.5;
        }

        100% {
            opacity: 1;
        }
    }

    .alert,
    #hintBox {
        background-color: #181818;
        border: 1.5px solid #00ff9d;
        border-radius: 8px;
        padding: 1rem;
        margin: 10px 0;
        color: #00ff9d;
        font-size: 1rem;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.05);
        display: none;
    }

    .terminal {
        background-color: #181818;
        border: 1.5px solid #00ff9d;
        border-radius: 8px;
        padding: 1rem;
        height: 150px;
        overflow-y: auto;
        font-family: inherit;
        margin-top: 20px;
        color: #00ff9d;
        font-size: 1rem;
        box-shadow: 0 2px 8px rgba(0, 255, 157, 0.05);
    }

    h1 {
        text-align: center;
        margin: 30px 0 20px 0;
        font-size: 2.5rem;
        color: #00ff9d;
        text-shadow: 0 0 8px #00ff9d;
        font-weight: bold;
        letter-spacing: 2px;
    }

    @media (max-width: 900px) {
        .cyber-main {
            max-width: 98vw;
            padding: 1rem;
        }

        .dashboard {
            padding: 1rem;
        }

        .network-map {
            grid-template-columns: repeat(3, 1fr);
        }

        .stats {
            grid-template-columns: 1fr 1fr;
        }
    }
</style>

<main class="min-h-screen mt-0">
    <div class="cyber-main">
        <h1 class="mb-10">üõ°Ô∏è Cyber Defense Station</h1>
        <div class="dashboard">
            <div class="alert" id="hintBox">Hint: Start by scanning the network for any vulnerabilities!</div>
            <div class="stats">
                <div class="stat-box">
                    <h3>Score</h3>
                    <div id="score">0</div>
                </div>
                <div class="stat-box">
                    <h3>Threats Detected</h3>
                    <div id="threats">0</div>
                </div>
                <div class="stat-box">
                    <h3>System Health</h3>
                    <div id="health">100%</div>
                </div>
                <div class="stat-box">
                    <h3>Level</h3>
                    <div id="level">1</div>
                </div>
            </div>
            <div class="controls">
                <button onclick="startGame()">Start Mission</button>
                <button onclick="scanNetwork()">Scan Network</button>
                <button onclick="deployFirewall()">Deploy Firewall</button>
            </div>
            <div class="alert" id="alert"></div>

            <div class="network-map" id="network">
                <div class="node">Node 1</div>
                <div class="node">Node 2</div>
                <div class="node">Node 3</div>
                <div class="node">Node 4</div>
                <div class="node">Node 5</div>
                <div class="node">Node 6</div>
                <div class="node">Node 7</div>
                <div class="node">Node 8</div>
                <div class="node">Node 9</div>
                <div class="node">Node 10</div>
                <div class="node">Node 11</div>
                <div class="node">Node 12</div>
                <div class="node">Node 13</div>
                <div class="node">Node 14</div>
                <div class="node">Node 15</div>
            </div>

            <div class="terminal" id="terminal"></div>
        </div>
    </div>
</main>

<script>
    let score = 0;
    let threats = 0;
    let health = 100;
    let level = 1;
    let gameInterval;
    let threatInterval = 2000;
    let nodes = [];
    let gameStartTime = null;
    let completedChallenges = [];

    function startGame() {
        gameStartTime = new Date();
        clearInterval(gameInterval);
        initializeNetwork();
        score = 0;
        threats = 0;
        health = 100;
        level = 1;
        threatInterval = 2000;
        updateStats();
        logToTerminal('Mission started. Monitoring network activity...');

        showHint('A threat may appear any moment. Be ready to scan the network.');
        scheduleThreats();
    }

    function scheduleThreats() {
        clearInterval(gameInterval);
        gameInterval = setInterval(() => {
            if (Math.random() < 0.3) {
                createThreat();
            }
        }, threatInterval);
    }

    function createThreat() {
        const index = Math.floor(Math.random() * nodes.length);
        if (!nodes[index].infected && !nodes[index].protected) {
            nodes[index].infected = true;
            nodes[index].element.classList.add('infected');
            logToTerminal(`‚ö†Ô∏è Suspicious activity detected on Node ${index + 1}`);
        }
    }

    function checkNode(index) {
        if (nodes[index].infected) {
            nodes[index].infected = false;
            nodes[index].element.classList.remove('infected');
            score += 100;
            threats++;
            logToTerminal(`‚úÖ Threat neutralized on Node ${index + 1}. +100 points`);
            showHint('Good job! Keep scanning the network for more threats.');

            // Check if it's time to level up
            if (threats % 5 === 0) { // Level up after neutralizing 5 threats
                levelUp();
            }

        } else {
            health -= 5;
            logToTerminal(`‚ùå False alarm on Node ${index + 1}. Health -5%`);
            showHint('No threat here. Be cautious to avoid false alarms.');
        }
        updateStats();
    }

    function updateStats() {
        document.getElementById('score').textContent = score;
        document.getElementById('threats').textContent = threats;
        document.getElementById('health').textContent = `${health}%`;
        document.getElementById('level').textContent = level;

        if (health <= 0) {
            clearInterval(gameInterval);
            logToTerminal('‚ùå Mission failed! System compromise detected.');
            saveGameSession();
        }
    }

    function levelUp() {
        level++;
        completedChallenges.push(`level_${level}`);
        threatInterval -= 200; // Increase difficulty by reducing interval
        if (threatInterval < 500) {
            threatInterval = 500; // Set a lower limit to avoid too frequent threats
        }

        logToTerminal(`‚ö° Level up! Welcome to Level ${level}. Threats are now more frequent.`);
        showHint('Threats will now appear more frequently. Stay sharp!');

        scheduleThreats(); // Reschedule threats at a faster rate
    }

    // Save game session to backend
    async function saveGameSession() {
        if (!gameStartTime) return;
        
        const timeSpent = Math.floor((new Date() - gameStartTime) / 1000);
        
        const gameData = {
            finalHealth: health,
            threatsNeutralized: threats,
            finalLevel: level,
            gameMode: 'cyber-defense'
        };

        try {
            const response = await fetch('/training/save-session', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    gameType: 'cyberGame',
                    score: score,
                    level: level,
                    timeSpent: timeSpent,
                    completedChallenges: completedChallenges,
                    gameData: gameData
                })
            });

            if (response.status === 401) {
                alert('Please sign in to save your progress');
                window.location.href = '/auth/login';
                return;
            }

            const result = await response.json();
            if (result.success) {
                console.log('Game session saved successfully');
            }
        } catch (error) {
            console.error('Error saving game session:', error);
        }
    }

    // Auto-save every 30 seconds during gameplay
    setInterval(() => {
        if (gameStartTime && health > 0) {
            saveGameSession();
        }
    }, 30000);

    function showHint(message) {
        const hintBox = document.getElementById('hintBox');
        hintBox.innerHTML = "Hint: " + message;
        hintBox.style.display = 'block';
    }



    function scanNetwork() {
        logToTerminal('üîç Scanning network for vulnerabilities...');
        showHint('Check any highlighted nodes for suspicious activity.');

        nodes.forEach((node, index) => {
            if (node.infected) {
                node.element.style.opacity = '0.5';
                setTimeout(() => {
                    node.element.style.opacity = '1';
                }, 1000);
            }
        });
    }



    function initializeNetwork() {
        const network = document.getElementById('network');
        network.innerHTML = '';
        for (let i = 0; i < 15; i++) {
            const node = document.createElement('div');
            node.className = 'node';
            node.innerHTML = `Node ${i + 1}`;
            node.onclick = () => checkNode(i);
            network.appendChild(node);
            nodes.push({
                element: node,
                infected: false,
                protected: false
            });
        }
    }



    function deployFirewall() {
        const index = Math.floor(Math.random() * nodes.length);
        nodes[index].protected = true;
        nodes[index].element.style.borderWidth = '3px';
        logToTerminal(`üõ°Ô∏è Firewall deployed on Node ${index + 1}`);
    }


    function logToTerminal(message) {
        const terminal = document.getElementById('terminal');
        const time = new Date().toLocaleTimeString();
        terminal.innerHTML += `[${time}] ${message}<br>`;
        terminal.scrollTop = terminal.scrollHeight;
    }

    initializeNetwork();
</script>
{{> footer}}